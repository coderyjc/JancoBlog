<template>
  <div class="main">
    <el-col :span="12">
      <search-article
        ref="searchArticle"
        :typeList="typeList"
        :isAdmin="true"
        @submit="submit"
        @reset="resetForm"></search-article>
    </el-col>
    <el-table
      :data="tableData"
      border
      style="width: 100%"
      v-loading="loading"
      @selection-change="handleSelectionChange"
    >
      <el-table-column
        type="selection"
        width="55">
      </el-table-column>
      <el-table-column
        prop="articleTitle"
        label="标题"
        width="280">
      </el-table-column>
      <el-table-column
        prop="userName"
        label="作者"
        width="120">
      </el-table-column>
      <el-table-column
        label="类型"
        width="120">
        <template slot-scope="scope">
          <span style="margin-left: 10px">{{ scope.row.typeName }}</span>
        </template>
      </el-table-column>
      <el-table-column
        label="发表时间"
        sortable
        width="250">
        <template slot-scope="scope">
          <i class="el-icon-time"></i>
          <span style="margin-left: 10px">{{ scope.row.articlePostTime | dateFormat }}</span>
        </template>
      </el-table-column>
      <el-table-column
        prop="articleEditTime"
        label="修改时间"
        sortable
        width="250">
        <template slot-scope="scope">
          <i class="el-icon-time"></i>
          <span style="margin-left: 10px">{{ scope.row.articleEditTime | dateFormat }}</span>
        </template>
      </el-table-column>
      <el-table-column
        prop="articleRank"
        label="置顶"
        width="100">
        <template slot-scope="scope">
          <el-switch
            :value="scope.row.articleRank === 1"
            @change="handleStickTopChange(scope.row)"></el-switch>
        </template>
      </el-table-column>
      <el-table-column
        prop="articleViewCount"
        label="浏览量"
        sortable
        width="100">
      </el-table-column>
      <el-table-column
        prop="articleLikeCount"
        label="点赞量"
        sortable
        width="100">
      </el-table-column>
      <el-table-column
        prop="articleCommentCount"
        label="评论量"
        sortable
        width="100">
      </el-table-column>
      <el-table-column
        label="操作"
        width="120">
        <template slot-scope="scope">
          <el-button
            type="text"
            size="small"><a
              href="http:
              target="_blank">查看</a></el-button>
          <el-button
            @click="deleteArticle(scope.row)"
            type="text"
            size="small">删除</el-button>
        </template>
      </el-table-column>
    </el-table>
    <div class="btn-group">
      <el-button
        type="danger"
        @click="batchDelete">删除选中</el-button>
    </div>
    <div class="pagiation">
      <el-pagination
        @size-change="handleSizeChange"
        @current-change="handleCurrentChange"
        :current-page="pn"
        :page-sizes="[10, 20, 30, 40]"
        :page-size="limit"
        layout="total, sizes, prev, pager, next, jumper"
        :total="total">
      </el-pagination>
    </div>
  </div>
</template>
<script>
import {
  getAll,
  batchDeleteArticles,
  toggleArticleStickTop,
} from '@/api/article'
import SearchArticle from '@/components/SearchArticle'
import { getAllType } from '@/api/type'
export default {
  components: { SearchArticle },
  data() {
    return {
      loading: false,
      typeList: [],
      tableData: [],
      pn: 1,
      limit: 10,
      total: 0,
      multipleSelection: [],
      condition: '',
    }
  },
  created() {
    this.get_article_list(1)
    this.get_type_list()
  },
  filters: {
    dateFormat(date) {
      var s = new Date(date)
      var y = s.getFullYear()
      var m =
        s.getMonth() + 1 < 10 ? '0' + (s.getMonth() + 1) : s.getMonth() + 1
      var dd = s.getDate() < 10 ? '0' + s.getDate() : s.getDate()
      var hh = s.getHours() < 10 ? '0' + s.getHours() : s.getHours()
      var mm = s.getMinutes() < 10 ? '0' + s.getMinutes() : s.getMinutes()
      var ss = s.getSeconds() < 10 ? '0' + s.getSeconds() : s.getSeconds()
      var enddate = y + '-' + m + '-' + dd + ' ' + hh + ':' + mm + ':' + ss
      return enddate
    },
  },
  methods: {
    handleStickTopChange(col) {
      toggleArticleStickTop(col.articleId).then((res) => {
        col.articleRank = 1 - col.articleRank
        this.$message({
          message: '成功',
          type: 'success',
        })
      })
    },
    handleSizeChange(val) {
      this.limit = val
      this.get_article_list(1)
    },
    handleCurrentChange(val) {
      this.get_article_list(val)
    },
    deleteArticle(row) {
      var msg = '将要删除文章 <' + row.articleTitle + '> , 是否继续?'
      this.$confirm(msg, '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning',
      })
        .then(() => {
          batchDeleteArticles(row.articleId).then((response) => {
            if (response.extend.suc) {
              this.$message({
                type: 'success',
                message: '删除成功!',
              })
              this.get_article_list(this.pn)
            } else {
              this.$message.error('删除失败!')
            }
          })
        })
        .catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除',
          })
        })
    },
    get_article_list(pn) {
      this.loading = true
      getAll(pn, this.limit, this.condition).then((response) => {
        var pageInfo = response.extend.pageInfo
        this.tableData = pageInfo.records
        this.total = pageInfo.total
      })
      this.loading = false
    },
    get_type_list() {
      getAllType().then((response) => {
        this.typeList = response.extend.pageInfo.records
      })
    },
    handleSelectionChange(val) {
      this.multipleSelection = val
    },
    batchDelete() {
      var ids = ''
      if (this.multipleSelection.length === 0) {
        this.$message.error('请先选择')
        return
      }
      this.multipleSelection.forEach((item) => {
        ids += item.articleId + '&'
      })
      this.$confirm('确定删除选中文章？', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning',
      })
        .then(() => {
          batchDeleteArticles(ids).then((response) => {
            if (response.extend.suc) {
              this.$message({
                type: 'success',
                message: '删除成功!',
              })
              this.get_article_list(this.pn)
            } else {
              this.$message.error('删除失败!')
            }
          })
        })
        .catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除',
            duration: 1000,
          })
        })
    },
    submit() {
      this.condition = this.$refs.searchArticle.generateQueryString()
      this.get_article_list(1)
    },
    resetForm() {
      this.condition = ''
      this.get_article_list(1)
    },
  },
}
</script>
<style scoped>
.pagiation {
  margin-top: 30px;
  margin-left: 30px;
}
.btn-group {
  margin: 20px;
}
.main {
  margin: 20px;
}
.search-bar {
  margin-bottom: 20px;
}
</style>
<template>
  <div class="main">
    <el-col :span="12">
      <search-article
        ref="searchArticle"
        :typeList="typeList"
        @submit="submit"
        @reset="resetForm"></search-article>
    </el-col>
    <el-table
      :data="tableData"
      border
      style="width: 100%"
      v-loading="loading"
      @selection-change="handleSelectionChange"
    >
      <el-table-column
        type="selection"
        width="55">
      </el-table-column>
      <el-table-column
        prop="articleTitle"
        label="标题"
        width="280">
      </el-table-column>
      <el-table-column
        label="类型"
        width="120">
        <template slot-scope="scope">
          <span style="margin-left: 10px">{{ scope.row.typeName }}</span>
        </template>
      </el-table-column>
      <el-table-column
        label="发表时间"
        sortable
        width="250">
        <template slot-scope="scope">
          <i class="el-icon-time"></i>
          <span style="margin-left: 10px">{{ scope.row.articlePostTime | dateFormat }}</span>
        </template>
      </el-table-column>
      <el-table-column
        prop="articleEditTime"
        label="修改时间"
        sortable
        width="250">
        <template slot-scope="scope">
          <i class="el-icon-time"></i>
          <span style="margin-left: 10px">{{ scope.row.articleEditTime | dateFormat }}</span>
        </template>
      </el-table-column>
      <el-table-column
        prop="articleIsComment"
        label="允许评论"
        width="100">
        <template slot-scope="scope">
          <el-switch
            :value="scope.row.articleIsComment === 1"
            @change="handleIsCommentChange(scope.row)"></el-switch>
        </template>
      </el-table-column>
      <el-table-column
        prop="articleViewCount"
        label="浏览量"
        sortable
        width="100">
      </el-table-column>
      <el-table-column
        prop="articleLikeCount"
        label="点赞量"
        sortable
        width="100">
      </el-table-column>
      <el-table-column
        prop="articleCommentCount"
        label="评论量"
        sortable
        width="100">
      </el-table-column>
      <el-table-column
        label="操作"
        width="120">
        <template slot-scope="scope">
          <el-button
            type="text"
            size="small">
            <router-link
              :to="'/article?id=' + scope.row.articleId"
              target="_blank">查看</router-link>
          </el-button>
          <el-button
            type="text"
            size="small">
            <router-link :to="'/write/write?id=' + scope.row.articleId">编辑</router-link>
          </el-button>
          <el-button
            @click="deleteArticle(scope.row)"
            type="text"
            size="small">删除</el-button>
        </template>
      </el-table-column>
    </el-table>
    <div class="btn-group">
      <el-button
        type="danger"
        @click="batchDelete">删除选中</el-button>
    </div>
    <div class="pagiation">
      <el-pagination
        @size-change="handleSizeChange"
        @current-change="handleCurrentChange"
        :current-page="pn"
        :page-sizes="[10, 20, 30, 40]"
        :page-size="limit"
        layout="total, sizes, prev, pager, next, jumper"
        :total="total">
      </el-pagination>
    </div>
  </div>
</template>
<script>
import {
  getArticleByUser,
  batchDeleteArticles,
  toggleArticleIsComment,
} from '@/api/article'
import { getAllType } from '@/api/type'
import SearchArticle from '@/components/SearchArticle'
export default {
  components: { SearchArticle },
  data() {
    return {
      loading: false,
      typeList: [],
      tableData: [],
      pn: 1,
      limit: 10,
      total: 0,
      multipleSelection: [],
      condition: '',
    }
  },
  created() {
    this.get_article_list(1)
    this.get_type_list()
  },
  filters: {
    dateFormat(date) {
      var s = new Date(date)
      var y = s.getFullYear()
      var m =
        s.getMonth() + 1 < 10 ? '0' + (s.getMonth() + 1) : s.getMonth() + 1
      var dd = s.getDate() < 10 ? '0' + s.getDate() : s.getDate()
      var hh = s.getHours() < 10 ? '0' + s.getHours() : s.getHours()
      var mm = s.getMinutes() < 10 ? '0' + s.getMinutes() : s.getMinutes()
      var ss = s.getSeconds() < 10 ? '0' + s.getSeconds() : s.getSeconds()
      var enddate = y + '-' + m + '-' + dd + ' ' + hh + ':' + mm + ':' + ss
      return enddate
    },
  },
  methods: {
    handleIsCommentChange(col) {
      toggleArticleIsComment(col.articleId).then((res) => {
        col.articleIsComment = 1 - col.articleIsComment
        this.$message({
          message: '成功',
          type: 'success',
        })
      })
    },
    handleSizeChange(val) {
      this.limit = val
      this.get_article_list(1)
    },
    handleCurrentChange(val) {
      this.get_article_list(val)
    },
    deleteArticle(row) {
      var msg = '将要删除文章 <' + row.articleTitle + '> , 是否继续?'
      this.$confirm(msg, '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning',
      })
        .then(() => {
          batchDeleteArticles(row.articleId).then((response) => {
            if (response.extend.suc) {
              this.$message({
                type: 'success',
                message: '删除成功!',
              })
              this.get_article_list(this.pn)
            } else {
              this.$message.error('删除失败!')
            }
          })
        })
        .catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除',
          })
        })
    },
    get_article_list(pn) {
      this.loading = true
      getArticleByUser(pn, this.limit, this.condition).then((response) => {
        var pageInfo = response.extend.pageInfo
        this.tableData = pageInfo.records
        this.total = pageInfo.total
      })
      this.loading = false
    },
    get_type_list() {
      getAllType().then((response) => {
        this.typeList = response.extend.pageInfo.records
      })
    },
    handleSelectionChange(val) {
      this.multipleSelection = val
    },
    batchDelete() {
      var ids = ''
      if (this.multipleSelection.length === 0) {
        this.$message.error('请先选择')
        return
      }
      this.multipleSelection.forEach((item) => {
        ids += item.articleId + '&'
      })
      this.$confirm('确定删除选中文章？', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning',
      })
        .then(() => {
          batchDeleteArticles(ids).then((response) => {
            if (response.extend.suc) {
              this.$message({
                type: 'success',
                message: '删除成功!',
              })
              this.get_article_list(this.pn)
            } else {
              this.$message.error('删除失败!')
            }
          })
        })
        .catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除',
            duration: 1000,
          })
        })
    },
    submit() {
      this.condition = this.$refs.searchArticle.generateQueryString()
      this.get_article_list(1)
    },
    resetForm() {
      this.condition = ''
      this.get_article_list(1)
    },
  },
}
</script>
<style scoped>
.pagiation {
  margin-top: 30px;
  margin-left: 30px;
}
.btn-group {
  margin: 20px;
}
.main {
  margin: 20px;
}
.search-bar {
  margin-bottom: 20px;
}
</style><template>
<div class="main">
  <el-col :span="12">
  <el-collapse accordion class="search-bar">
    <el-collapse-item>
      <template slot="title">
        <i class="header-icon el-icon-search" style="font-size:20px;margin-right: 5px;"></i>筛选评论
      </template>
      <el-form ref="form" label-width="80px">
        <el-form-item label="所在文章">
          <el-input v-model="query.article_title"></el-input>
        </el-form-item>
        <el-form-item label="作者">
          <el-input v-model="query.comment_author_name"></el-input>
        </el-form-item>
        <el-form-item label="发表时间">
          <el-col :span="11">
            <el-date-picker type="date" placeholder="开始日期" v-model="query.start" style="width: 100%;"></el-date-picker>
          </el-col>
          <el-col :span="11">
            <el-date-picker type="date" placeholder="结束日期" v-model="query.end" style="width: 100%;"></el-date-picker>
          </el-col>
        </el-form-item>
        <el-form-item label="赞同数量">
            <el-radio-group v-model="query.rank_like">
            <el-radio label="无"></el-radio>
            <el-radio label="升序"></el-radio>
            <el-radio label="降序"></el-radio>
            </el-radio-group>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="submitSearch">搜索</el-button>
          <el-button @click="resetForm">重置</el-button>
        </el-form-item>
      </el-form>
    </el-collapse-item>
  </el-collapse>
  </el-col>
  <el-table
    :data="tableData"
    border
    style="width: 100%"
    v-loading="loading"
    @selection-change="handleSelectionChange">
     <el-table-column
      type="selection"
      width="55">
    </el-table-column>
    <el-table-column
      prop="articleTitle"
      label="所在文章"
      width="280">
    </el-table-column>
    <el-table-column
      prop="commentAuthorName"
      label="作者"
      width="120">
    </el-table-column>
    <el-table-column
      label="内容"
      width="400">
        <template slot-scope="scope">
          <span style="margin-left: 10px">{{ scope.row.commentContent | commentFormat }}</span>
        </template>
    </el-table-column>
    <el-table-column
      label="发表时间"
      sortable
      width="250">
      <template slot-scope="scope">
        <i class="el-icon-time"></i>
        <span style="margin-left: 10px">{{ scope.row.commentDate | dateFormat }}</span>
      </template>
    </el-table-column>
    <el-table-column
      prop="commentLikeCount"
      label="赞同"
      sortable
      width="100">
    </el-table-column>
    <el-table-column
      label="操作"
      width="120">
      <template slot-scope="scope">
        <el-button @click="viewDetail(scope.row)" type="text" size="small">查看</el-button>
        <el-button @click="deleteComment(scope.row)" type="text" size="small">删除</el-button>
      </template>
    </el-table-column>
  </el-table>
  <div class="btn-group">
    <el-button type="danger" @click="batchDelete">删除选中</el-button>
  </div>
  <div class="pagiation">
    <el-pagination
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
      :current-page="pn"
      :page-sizes="[10, 20, 30, 40]"
      :page-size="limit"
      layout="total, sizes, prev, pager, next, jumper"
      :total="total">
    </el-pagination>
  </div>
  <el-dialog title="评论详情" :visible.sync="commentDetailVisable" class="comment-detail">
    <p> <span>所在文章</span> {{ commentDetail.articleTitle }}</p>
    <p> <span>作者</span> {{ commentDetail.commentAuthorName }}</p>
    <p> <span>内容</span> {{ commentDetail.commentContent }}</p>
    <p> <span>发表日期</span> {{ commentDetail.commentDate | dateFormat }}</p>
    <p> <span>赞同数</span> {{ commentDetail.commentLikeCount }}</p>
  </el-dialog>
</div>
</template>
<script>
import { getAll, batchDeleteComments } from '@/api/comment'
import { parseTime } from '@/utils/index'
  export default {
    data() {
      return {
        loading: false,
        tableData: [],
        types: [],
        pn: 1,
        limit: 10,
        total: 0,
        multipleSelection: [],
        condition: "",
        query: {
          comment_author_name: "",
          article_title: "",
          start: "",
          end: "",
          rank_like: "",
        },
        commentDetailVisable: false,
        commentDetail: {}
      }
    },
    created(){
      this.get_comment_list(1)
    },
    filters: {
      dateFormat(date) {
				var s = new Date(date)
				var y = s.getFullYear()
				var m = (s.getMonth() + 1) < 10 ? '0' + (s.getMonth() + 1) : (s.getMonth() + 1)
				var dd = s.getDate() < 10 ? '0' + s.getDate() : s.getDate()
				var hh = s.getHours() < 10 ? '0' + s.getHours() : s.getHours()
				var mm = s.getMinutes() < 10 ? '0' + s.getMinutes() : s.getMinutes()
				var ss = s.getSeconds() < 10 ? '0' + s.getSeconds() : s.getSeconds()
				var enddate = y + '-' + m + '-' + dd + ' ' + hh + ':' + mm + ":" + ss
				return enddate
			},
      commentFormat(content){
        if(content.length < 20){
          return content
        } else {
          return content.substr(0, 20) + '... ...'
        }
      }
    },
    methods: {
      viewDetail(row){
        this.commentDetail = row
        this.commentDetailVisable = !this.commentDetailVisable
      },
      handleSizeChange(val) {
        this.limit = val
        this.get_comment_list(1)
      },
      handleCurrentChange(val) {
        this.get_comment_list(val)
      },
      deleteComment(row) {
        var msg = '将要删除该评论 , 是否继续?'
         this.$confirm(msg, '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          batchDeleteComments(row.commentId).then(response => {
            if(response.extend.suc === 'success'){
              this.$message({
                type: 'success',
                message: '删除成功!'
              });
              this.get_comment_list(this.pn)
            } else {
              this.$message.error('删除失败!');
            }
          })
        }).catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除'
          });            });
      },
      get_comment_list(pn){
        this.loading = true
        getAll(pn, this.limit, this.condition).then(response => {
          var pageInfo = response.extend.pageInfo
          this.tableData = pageInfo.records
          this.total = pageInfo.total
        })
        this.loading = false
      },
      handleSelectionChange(val){
        this.multipleSelection = val
      },
      batchDelete(){
        var ids = ''
        if(this.multipleSelection.length === 0){
          this.$message.error('请先选择');
          return
        }
          this.multipleSelection.forEach(item => {
          ids += item.commentId + '&'
        });
        this.$confirm('确定删除选中评论？', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          batchDeleteComments(ids).then(response => {
            if(response.extend.suc === 'success'){
              this.$message({
                type: 'success',
                message: '删除成功!'
              });
              this.get_comment_list(this.pn)
            } else {
              this.$message.error('删除失败!');
            }
          })
        }).catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除',
            duration: 1000
          });            });
      },
      submitSearch(){
          this.generateQueryString();
          this.get_comment_list(1);
      },
      resetForm(){
          this.query.comment_author_name = ""
          this.query.article_title = ""
          this.query.start = ""
          this.query.end =""
          this.query.rank_like = ""
          this.condition = ""
          this.get_comment_list(1)
      },
      generateQueryString(){
          let condition = ""
          let query = this.query
          if(query.comment_author_name !== ""){
              condition += ("comment_author_name=" + query.comment_author_name
                  + "--")
          }
          if(query.article_title !== ""){
              condition += ("article_title=" + query.article_title + "--")
          }
          if(query.start !== ""){
              condition += ("start=" + parseTime(query.start) + "--")
          }
          if(query.end !== ""){
              condition += ("end=" + parseTime(query.end) + "--")
          }
          if(query.rank_like == '升序'){
            condition += ("rank_like=1--")
          } else if (query.rank_like == '降序'){
            condition += ("rank_like=0--")
          }
          condition = condition.lastIndexOf("--") === condition.length - 2 ?
              condition.substr(0, condition.length - 2) :
              condition
          this.condition = condition
      }
    }
  }
</script>
<style lang="scss" scoped>
.pagiation{
  margin-top: 30px;
  margin-left: 30px;
}
.btn-group{
  margin: 20px;
}
.main{
  margin: 20px;
}
.search-bar{
  margin-bottom: 20px;
}
.comment-detail{
  p{
    font-size: 17px;
    line-height: 30px;
  }
  span{
    font-weight: 700;
  }
}
</style>
<template>
<div class="main">
  <el-col :span="12">
  <el-collapse accordion class="search-bar">
    <el-collapse-item>
      <template slot="title">
        <i class="header-icon el-icon-search" style="font-size:20px;margin-right: 5px;"></i>筛选评论
      </template>
      <el-form ref="form" label-width="80px">
        <el-form-item label="所在文章">
          <el-input v-model="query.article_title"></el-input>
        </el-form-item>
        <el-form-item label="发表时间">
          <el-col :span="11">
            <el-date-picker type="date" placeholder="开始日期" v-model="query.start" style="width: 100%;"></el-date-picker>
          </el-col>
          <el-col :span="11">
            <el-date-picker type="date" placeholder="结束日期" v-model="query.end" style="width: 100%;"></el-date-picker>
          </el-col>
        </el-form-item>
        <el-form-item label="赞同数量">
            <el-radio-group v-model="query.rank_like">
            <el-radio label="无"></el-radio>
            <el-radio label="升序"></el-radio>
            <el-radio label="降序"></el-radio>
            </el-radio-group>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="submitSearch">搜索</el-button>
          <el-button @click="resetForm">重置</el-button>
        </el-form-item>
      </el-form>
    </el-collapse-item>
  </el-collapse>
  </el-col>
  <el-table
    :data="tableData"
    border
    style="width: 100%"
    v-loading="loading"
    @selection-change="handleSelectionChange">
     <el-table-column
      type="selection"
      width="55">
    </el-table-column>
    <el-table-column
      prop="articleTitle"
      label="所在文章"
      width="280">
    </el-table-column>
    <el-table-column
      label="内容"
      width="400">
        <template slot-scope="scope">
          <span style="margin-left: 10px">{{ scope.row.commentContent | commentFormat }}</span>
        </template>
    </el-table-column>
    <el-table-column
      label="发表时间"
      sortable
      width="250">
      <template slot-scope="scope">
        <i class="el-icon-time"></i>
        <span style="margin-left: 10px">{{ scope.row.commentDate | dateFormat }}</span>
      </template>
    </el-table-column>
    <el-table-column
      prop="commentLikeCount"
      label="赞同"
      sortable
      width="100">
    </el-table-column>
    <el-table-column
      label="操作"
      width="120">
      <template slot-scope="scope">
        <el-button @click="viewDetail(scope.row)" type="text" size="small">查看</el-button>
        <el-button @click="deleteComment(scope.row)" type="text" size="small">删除</el-button>
      </template>
    </el-table-column>
  </el-table>
  <div class="btn-group">
    <el-button type="danger" @click="batchDelete">删除选中</el-button>
  </div>
  <div class="pagiation">
    <el-pagination
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
      :current-page="pn"
      :page-sizes="[10, 20, 30, 40]"
      :page-size="limit"
      layout="total, sizes, prev, pager, next, jumper"
      :total="total">
    </el-pagination>
  </div>
  <el-dialog title="评论详情" :visible.sync="commentDetailVisable" class="comment-detail">
    <p> <span>所在文章</span> {{ commentDetail.articleTitle }}</p>
    <p> <span>作者</span> {{ commentDetail.commentAuthorName }}</p>
    <p> <span>内容</span> {{ commentDetail.commentContent }}</p>
    <p> <span>发表日期</span> {{ commentDetail.commentDate | dateFormat }}</p>
    <p> <span>赞同数</span> {{ commentDetail.commentLikeCount }}</p>
  </el-dialog>
</div>
</template>
<script>
import { getCommentByUserPosted, batchDeleteComments } from '@/api/comment'
import { parseTime } from '@/utils/index'
  export default {
    data() {
      return {
        loading: false,
        tableData: [],
        types: [],
        pn: 1,
        limit: 10,
        total: 0,
        multipleSelection: [],
        condition: "",
        query: {
          article_title: "",
          start: "",
          end: "",
          rank_like: "",
        },
        commentDetailVisable: false,
        commentDetail: {}
      }
    },
    created(){
      this.get_comment_list(1)
    },
    filters: {
      dateFormat(date) {
				var s = new Date(date)
				var y = s.getFullYear()
				var m = (s.getMonth() + 1) < 10 ? '0' + (s.getMonth() + 1) : (s.getMonth() + 1)
				var dd = s.getDate() < 10 ? '0' + s.getDate() : s.getDate()
				var hh = s.getHours() < 10 ? '0' + s.getHours() : s.getHours()
				var mm = s.getMinutes() < 10 ? '0' + s.getMinutes() : s.getMinutes()
				var ss = s.getSeconds() < 10 ? '0' + s.getSeconds() : s.getSeconds()
				var enddate = y + '-' + m + '-' + dd + ' ' + hh + ':' + mm + ":" + ss
				return enddate
			},
      commentFormat(content){
        if(content.length < 20){
          return content
        } else {
          return content.substr(0, 20) + '... ...'
        }
      }
    },
    methods: {
      viewDetail(row){
        this.commentDetail = row
        this.commentDetailVisable = !this.commentDetailVisable
      },
      handleSizeChange(val) {
        this.limit = val
        this.get_comment_list(1)
      },
      handleCurrentChange(val) {
        this.get_comment_list(val)
      },
      deleteComment(row) {
        var msg = '将要删除该评论 , 是否继续?'
         this.$confirm(msg, '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          batchDeleteComments(row.commentId).then(response => {
            if(response.extend.suc === 'success'){
              this.$message({
                type: 'success',
                message: '删除成功!'
              });
              this.get_comment_list(this.pn)
            } else {
              this.$message.error('删除失败!');
            }
          })
        }).catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除'
          });            });
      },
      get_comment_list(pn){
        this.loading = true
        getCommentByUserPosted(pn, this.limit, this.condition).then(response => {
          var pageInfo = response.extend.pageInfo
          this.tableData = pageInfo.records
          this.total = pageInfo.total
        })
        this.loading = false
      },
      handleSelectionChange(val){
        this.multipleSelection = val
      },
      batchDelete(){
        var ids = ''
        if(this.multipleSelection.length === 0){
          this.$message.error('请先选择');
          return
        }
          this.multipleSelection.forEach(item => {
          ids += item.commentId + '&'
        });
        this.$confirm('确定删除选中评论？', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          batchDeleteComments(ids).then(response => {
            if(response.extend.suc === 'success'){
              this.$message({
                type: 'success',
                message: '删除成功!'
              });
              this.get_comment_list(this.pn)
            } else {
              this.$message.error('删除失败!');
            }
          })
        }).catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除',
            duration: 1000
          });            });
      },
      submitSearch(){
          this.generateQueryString();
          this.get_comment_list(1);
      },
      resetForm(){
          this.query.article_title = ""
          this.query.start = ""
          this.query.end =""
          this.query.rank_like = ""
          this.condition = ""
          this.get_comment_list(1)
      },
      generateQueryString(){
          let condition = ""
          let query = this.query
          if(query.article_title !== ""){
              condition += ("article_title=" + query.article_title + "--")
          }
          if(query.start !== ""){
              condition += ("start=" + parseTime(query.start) + "--")
          }
          if(query.end !== ""){
              condition += ("end=" + parseTime(query.end) + "--")
          }
          if(query.rank_like == '升序'){
            condition += ("rank_like=1--")
          } else if (query.rank_like == '降序'){
            condition += ("rank_like=0--")
          }
          condition = condition.lastIndexOf("--") === condition.length - 2 ?
              condition.substr(0, condition.length - 2) :
              condition
          this.condition = condition
      }
    }
  }
</script>
<style lang="scss" scoped>
.pagiation{
  margin-top: 30px;
  margin-left: 30px;
}
.btn-group{
  margin: 20px;
}
.main{
  margin: 20px;
}
.search-bar{
  margin-bottom: 20px;
}
.comment-detail{
  p{
    font-size: 17px;
    line-height: 30px;
  }
  span{
    font-weight: 700;
  }
}
</style>
<template>
<div class="main">
  <el-col :span="12">
  <el-collapse accordion class="search-bar">
    <el-collapse-item>
      <template slot="title">
        <i class="header-icon el-icon-search" style="font-size:20px;margin-right: 5px;"></i>筛选评论
      </template>
      <el-form ref="form" label-width="80px">
        <el-form-item label="所在文章">
          <el-input v-model="query.article_title"></el-input>
        </el-form-item>
        <el-form-item label="作者">
          <el-input v-model="query.comment_author_name"></el-input>
        </el-form-item>
        <el-form-item label="发表时间">
          <el-col :span="11">
            <el-date-picker type="date" placeholder="开始日期" v-model="query.start" style="width: 100%;"></el-date-picker>
          </el-col>
          <el-col :span="11">
            <el-date-picker type="date" placeholder="结束日期" v-model="query.end" style="width: 100%;"></el-date-picker>
          </el-col>
        </el-form-item>
        <el-form-item label="赞同数量">
            <el-radio-group v-model="query.rank_like">
            <el-radio label="无"></el-radio>
            <el-radio label="升序"></el-radio>
            <el-radio label="降序"></el-radio>
            </el-radio-group>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="submitSearch">搜索</el-button>
          <el-button @click="resetForm">重置</el-button>
        </el-form-item>
      </el-form>
    </el-collapse-item>
  </el-collapse>
  </el-col>
  <el-table
    :data="tableData"
    border
    style="width: 100%"
    v-loading="loading"
    @selection-change="handleSelectionChange">
     <el-table-column
      type="selection"
      width="55">
    </el-table-column>
    <el-table-column
      prop="articleTitle"
      label="所在文章"
      width="280">
    </el-table-column>
    <el-table-column
      prop="commentAuthorName"
      label="作者"
      width="120">
    </el-table-column>
    <el-table-column
      label="内容"
      width="400">
        <template slot-scope="scope">
          <span style="margin-left: 10px">{{ scope.row.commentContent | commentFormat }}</span>
        </template>
    </el-table-column>
    <el-table-column
      label="发表时间"
      sortable
      width="250">
      <template slot-scope="scope">
        <i class="el-icon-time"></i>
        <span style="margin-left: 10px">{{ scope.row.commentDate | dateFormat }}</span>
      </template>
    </el-table-column>
    <el-table-column
      prop="commentLikeCount"
      label="赞同"
      sortable
      width="100">
    </el-table-column>
    <el-table-column
      label="操作"
      width="120">
      <template slot-scope="scope">
        <el-button @click="viewDetail(scope.row)" type="text" size="small">查看</el-button>
        <el-button @click="deleteComment(scope.row)" type="text" size="small">删除</el-button>
      </template>
    </el-table-column>
  </el-table>
  <div class="btn-group">
    <el-button type="danger" @click="batchDelete">删除选中</el-button>
  </div>
  <div class="pagiation">
    <el-pagination
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
      :current-page="pn"
      :page-sizes="[10, 20, 30, 40]"
      :page-size="limit"
      layout="total, sizes, prev, pager, next, jumper"
      :total="total">
    </el-pagination>
  </div>
  <el-dialog title="评论详情" :visible.sync="commentDetailVisable" class="comment-detail">
    <p> <span>所在文章</span> {{ commentDetail.articleTitle }}</p>
    <p> <span>作者</span> {{ commentDetail.commentAuthorName }}</p>
    <p> <span>内容</span> {{ commentDetail.commentContent }}</p>
    <p> <span>发表日期</span> {{ commentDetail.commentDate | dateFormat }}</p>
    <p> <span>赞同数</span> {{ commentDetail.commentLikeCount }}</p>
  </el-dialog>
</div>
</template>
<script>
import { getCommentByUserReceive, batchDeleteComments } from '@/api/comment'
import { parseTime } from '@/utils/index'
  export default {
    data() {
      return {
        loading: false,
        tableData: [],
        types: [],
        pn: 1,
        limit: 10,
        total: 0,
        multipleSelection: [],
        condition: "",
        query: {
          comment_author_name: "",
          article_title: "",
          start: "",
          end: "",
          rank_like: "",
        },
        commentDetailVisable: false,
        commentDetail: {}
      }
    },
    created(){
      this.get_comment_list(1)
    },
    filters: {
      dateFormat(date) {
				var s = new Date(date)
				var y = s.getFullYear()
				var m = (s.getMonth() + 1) < 10 ? '0' + (s.getMonth() + 1) : (s.getMonth() + 1)
				var dd = s.getDate() < 10 ? '0' + s.getDate() : s.getDate()
				var hh = s.getHours() < 10 ? '0' + s.getHours() : s.getHours()
				var mm = s.getMinutes() < 10 ? '0' + s.getMinutes() : s.getMinutes()
				var ss = s.getSeconds() < 10 ? '0' + s.getSeconds() : s.getSeconds()
				var enddate = y + '-' + m + '-' + dd + ' ' + hh + ':' + mm + ":" + ss
				return enddate
			},
      commentFormat(content){
        if(content.length < 20){
          return content
        } else {
          return content.substr(0, 20) + '... ...'
        }
      }
    },
    methods: {
      viewDetail(row){
        this.commentDetail = row
        this.commentDetailVisable = !this.commentDetailVisable
      },
      handleSizeChange(val) {
        this.limit = val
        this.get_comment_list(1)
      },
      handleCurrentChange(val) {
        this.get_comment_list(val)
      },
      deleteComment(row) {
        var msg = '将要删除该评论 , 是否继续?'
         this.$confirm(msg, '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          batchDeleteComments(row.commentId).then(response => {
            if(response.extend.suc === 'success'){
              this.$message({
                type: 'success',
                message: '删除成功!'
              });
              this.get_comment_list(this.pn)
            } else {
              this.$message.error('删除失败!');
            }
          })
        }).catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除'
          });            });
      },
      get_comment_list(pn){
        this.loading = true
        getCommentByUserReceive(pn, this.limit, this.condition).then(response => {
          var pageInfo = response.extend.pageInfo
          this.tableData = pageInfo.records
          this.total = pageInfo.total
        })
        this.loading = false
      },
      handleSelectionChange(val){
        this.multipleSelection = val
      },
      batchDelete(){
        var ids = ''
        if(this.multipleSelection.length === 0){
          this.$message.error('请先选择');
          return
        }
          this.multipleSelection.forEach(item => {
          ids += item.commentId + '&'
        });
        this.$confirm('确定删除选中评论？', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          batchDeleteComments(ids).then(response => {
            if(response.extend.suc === 'success'){
              this.$message({
                type: 'success',
                message: '删除成功!'
              });
              this.get_comment_list(this.pn)
            } else {
              this.$message.error('删除失败!');
            }
          })
        }).catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除',
            duration: 1000
          });            });
      },
      submitSearch(){
          this.generateQueryString();
          this.get_comment_list(1);
      },
      resetForm(){
          this.query.comment_author_name = ""
          this.query.article_title = ""
          this.query.start = ""
          this.query.end =""
          this.query.rank_like = ""
          this.condition = ""
          this.get_comment_list(1)
      },
      generateQueryString(){
          let condition = ""
          let query = this.query
          if(query.comment_author_name !== ""){
              condition += ("comment_author_name=" + query.comment_author_name
                  + "--")
          }
          if(query.article_title !== ""){
              condition += ("article_title=" + query.article_title + "--")
          }
          if(query.start !== ""){
              condition += ("start=" + parseTime(query.start) + "--")
          }
          if(query.end !== ""){
              condition += ("end=" + parseTime(query.end) + "--")
          }
          if(query.rank_like == '升序'){
            condition += ("rank_like=1--")
          } else if (query.rank_like == '降序'){
            condition += ("rank_like=0--")
          }
          condition = condition.lastIndexOf("--") === condition.length - 2 ?
              condition.substr(0, condition.length - 2) :
              condition
          this.condition = condition
      }
    }
  }
</script>
<style lang="scss" scoped>
.pagiation{
  margin-top: 30px;
  margin-left: 30px;
}
.btn-group{
  margin: 20px;
}
.main{
  margin: 20px;
}
.search-bar{
  margin-bottom: 20px;
}
.comment-detail{
  p{
    font-size: 17px;
    line-height: 30px;
  }
  span{
    font-weight: 700;
  }
}
</style>
<template>
  <div class="dashboard-container">
    <div class="personal-info">
      <el-card class="personal-info-sign">
        <el-col>
          <el-avatar
            :size="150"
            :src="avatarUrl"></el-avatar>
        </el-col>
        <el-col class="sign">
          <div class="user-name">{{ name }}</div>
          <div class="user-signature">{{ user.data.userSignature }}</div>
        </el-col>
      </el-card>
      <el-row class="statastic">
        <el-col :span="4">
          <el-card>
            <svg
              t="1633262231414"
              class="icon"
              viewBox="0 0 1024 1024"
              version="1.1"
              xmlns="http:
              p-id="3504"
              width="80"
              height="80">
              <path
                d="M734.634667 72.448C717.824 55.978667 685.226667 42.666667 661.674667 42.666667H204.8C162.389333 42.666667 128 79.189333 128 124.330667v775.338666C128 944.768 162.474667 981.333333 204.8 981.333333h614.4c42.410667 0 76.8-36.693333 76.8-81.578666V273.493333c0-23.68-13.781333-56.405333-30.378667-72.661333l-130.986666-128.426667zM341.333333 298.666667h341.333334a42.666667 42.666667 0 0 1 0 85.333333H341.333333a42.666667 42.666667 0 1 1 0-85.333333z m0 170.666666h170.666667a42.666667 42.666667 0 0 1 0 85.333334H341.333333a42.666667 42.666667 0 0 1 0-85.333334z"
                p-id="3505"
                fill="#13227a"
              ></path>
            </svg>
            <div class="count">
              <span class="count-char">总文章</span>
              <span class="count-number">{{ user.data.totalArticle | dataFormat}}</span>
            </div>
          </el-card>
        </el-col>
        <el-col :span="4">
          <el-card>
            <svg
              t="1633243178182"
              class="icon"
              viewBox="0 0 1024 1024"
              version="1.1"
              xmlns="http:
              p-id="5920"
              width="80"
              height="80">
              <path
                d="M510.557138 204.354248c-302.839283 0-458.323497 306.150702-458.323497 306.150702s117.330242 306.189587 458.323497 306.189587c308.802088 0 458.300984-304.995389 458.300984-304.995389S818.167075 204.354248 510.557138 204.354248L510.557138 204.354248 510.557138 204.354248zM511.245823 701.866279c-110.729917 0-190.772928-83.72589-190.772928-191.364399 0-107.647719 80.049151-191.352119 190.772928-191.352119 110.723777 0 190.763718 83.697237 190.763718 191.352119C702.010565 618.140389 621.970624 701.866279 511.245823 701.866279L511.245823 701.866279 511.245823 701.866279zM511.245823 395.675668c-63.286372 0.145309-114.460892 53.321416-114.460892 114.827235 0 61.473073 51.175543 114.821095 114.460892 114.821095 63.282279 0 114.453728-53.352115 114.453728-114.821095C625.703645 448.975595 574.529125 395.556964 511.245823 395.675668L511.245823 395.675668 511.245823 395.675668z"
                p-id="5921"
                fill="#1296db"
              ></path>
            </svg>
            <div class="count">
              <span class="count-char">总浏览</span>
              <span class="count-number">{{ user.data.totalViewCount | dataFormat }}</span>
            </div>
          </el-card>
        </el-col>
        <el-col :span="4">
          <el-card>
            <svg
              t="1633244239936"
              class="icon"
              viewBox="0 0 1024 1024"
              version="1.1"
              xmlns="http:
              p-id="7377"
              width="80"
              height="80">
              <path
                d="M832 128 192 128C139.072 128 96 171.072 96 224l0 512c0 52.928 43.072 96 96 96l210.752 0 86.624 86.624C495.616 924.864 503.808 928 512 928s16.384-3.136 22.624-9.376L621.248 832 832 832c52.928 0 96-43.072 96-96L928 224C928 171.072 884.928 128 832 128zM336 512C309.536 512 288 490.464 288 464S309.536 416 336 416s48 21.536 48 48S362.464 512 336 512zM528 512c-26.464 0-48-21.536-48-48s21.536-48 48-48 48 21.536 48 48S554.464 512 528 512zM720 512c-26.464 0-48-21.536-48-48s21.536-48 48-48 48 21.536 48 48S746.464 512 720 512z"
                p-id="7378"
                fill="#1dd76f"
              ></path>
            </svg>
            <div class="count">
              <span class="count-char">总获评</span>
              <span class="count-number">{{ user.data.totalCommentCount | dataFormat }}</span>
            </div>
          </el-card>
        </el-col>
        <el-col :span="4">
          <el-card>
            <svg
              t="1633244324852"
              class="icon"
              viewBox="0 0 1024 1024"
              version="1.1"
              xmlns="http:
              p-id="8333"
              width="80"
              height="80">
              <path
                d="M581.674667 170.666667c6.72 0 18.538667 1.429333 27.584 4.352 44.544 14.442667 70.186667 61.76 59.797333 109.12l-1.066667 4.437333-39.701333 148.906667h157.269333c19.093333 0 37.973333 7.082667 50.773334 21.248 14.293333 15.829333 19.861333 36.778667 15.616 57.109333l-1.066667 4.352-82.922667 295.253333a51.882667 51.882667 0 0 1-46.08 37.76l-3.84 0.128H298.666667V452.501333c84.949333-18.389333 209.194667-244.373333 209.194666-244.373333C525.525333 184.170667 546.944 170.666667 581.674667 170.666667zM234.666667 448v405.333333H170.666667V448h64z"
                p-id="8334"
                fill="#d81e06"
              ></path>
            </svg>
            <div class="count">
              <span class="count-char">总获赞</span>
              <span class="count-number">{{ user.data.totalLikeCount | dataFormat }}</span>
            </div>
          </el-card>
        </el-col>
      </el-row>
    </div>
    <div class="message">
      <el-row :gutter="12">
        <el-col :span="8">
          <el-card
            class="not-exist"
            v-if="user.article.length <= 0">
          最近未发表文章
          </el-card>
          <el-card v-if="user.article.length > 0">
            <h3>最近文章</h3>
            <div
              class="message-item"
              v-for="(item, index) in user.article"
              :key="index">
              <span class="article">{{ item.articleTitle }}</span>
              <span class="time">{{ item.articlePostTime | changeTime }}</span>
            </div>
          </el-card>
        </el-col>
        <el-col :span="8">
          <el-card
            class="not-exist"
            v-if="user.article.length <= 0">
          最近未收到点赞
          </el-card>
          <el-card v-if="user.like.length > 0">
            <h3>最近收到的赞</h3>
            <div
              class="message-item"
              v-for="(item, index) in user.like"
              :key="index">
              <span class="name">{{item.userName}}</span> 点赞了
              <span class="article">{{item.articleTitle}}</span>
              <span class="time">{{ item.likeDate | changeTime }}</span>
            </div>
          </el-card>
        </el-col>
        <el-col :span="8">
          <el-card
            class="not-exist"
            v-if="user.article.length <= 0">
          最近未收到评论
          </el-card>
          <el-card v-if="user.comment.length > 0">
            <h3>最近收到的评论</h3>
            <div
              class="message-item"
              v-for="(item, index) in user.comment"
              :key="index">
              <span class="name">{{item.commentAuthorName}}</span> 评论了
              <span class="article">{{item.articleTitle}}</span>
              <span class="time">{{ item.commentDate | changeTime }}</span>
            </div>
          </el-card>
        </el-col>
      </el-row>
    </div>
  </div>
</template>
<script>
import { mapGetters } from 'vuex'
import { getUserTotalData } from '@/api/user'
import { getUserCommentRecently } from '@/api/comment'
import { getUserLikeRecently } from '@/api/like'
import { getUserArticleRecently } from '@/api/article'
import timeago from '@/assets/js/timeago.js'
export default {
  name: 'Dashboard',
  data() {
    return {
      avatarUrl: '',
      user: {
        data: {
          articleAuthor: '',
          userName: '',
          userSignature: '代码改变世界', 
          totalArticle: 0,
          totalViewCount: 0,
          totalLikeCount: 0,
          totalCommentCount: 0,
        },
        article: [],
        like: [],
        comment: [],
      },
    }
  },
  computed: {
    ...mapGetters(['name']),
  },
  filters:{
    dataFormat(data){
      if(null === data) return 0;
      if(data > 1000){
        return Number(data/1000) + "k"
      }
      return data
    },
    changeTime(val){
        let time = new Date(val); 
        return new timeago().format(time, 'zh_CN'); 
    }
  },
  created() {
    this.get_user_total_data()
    this.avatarUrl = this.$store.getters.avatar
  },
  methods: {
    async get_user_total_data() {
      var _this = this
      await getUserTotalData(-1).then((res) => {
        _this.user.data = res.extend.data
      })
      getUserLikeRecently(_this.user.data.articleAuthor, 1, 10).then(
        (res) => {
         _this.user.like = res.extend.pageInfo.records
      })
      getUserCommentRecently(_this.user.data.articleAuthor, 1, 10).then(
        (res) => {
          _this.user.comment = res.extend.pageInfo.records
        }
      )
      getUserArticleRecently(_this.user.data.articleAuthor, 1, 10).then(
        (res) => {
          _this.user.article = res.extend.pageInfo.records
        }
      )
    },
  },
}
</script>
<style lang="scss" scoped>
.dashboard {
  background-color: rgb(240, 242, 245);
  &-container {
    padding: 20px;
    .personal-info {
      width: 100%;
      text-align: center;
      .personal-info-sign {
        margin: 10px auto;
        background-image: url('../../assets/imgs/personal-card.png');
        .sign {
          text-align: center;
          color: white;
          .user-name {
            margin: 10px auto;
            font-size: 40px;
          }
          .user-signature {
            margin: 10px auto;
            font-size: 18px;
          }
        }
      }
      .statastic {
        display: flex;
        justify-content: space-around;
      }
      .count {
        .count-char {
          font-size: 15px;
          margin: 0 5px;
        }
        .count-number {
          font-size: 25px;
          font-weight: 550;
        }
      }
    }
    .message {
      margin: 10px auto;
      .message-item {
        padding-top: 6px;
        padding-bottom: 6px;
        cursor: pointer;
        .time {
          float: right;
          font-size: 13px;
          color: #afa8a8;
        }
        .name {
          font-weight: 600;
        }
        .article {
          font-weight: 750;
        }
        &:hover {
          background-color: rgb(236, 236, 236);
        }
      }
      .not-exist{
        padding: 20px;
        text-align: center;
        color: gray;
      }
    }
  }
}
</style>
<template>
  <div id="app">
    <el-row style="position: fixed; width:100%; z-index: 1">
      <el-col
        :span="14"
        :offset="5">
        <el-menu
          default-active="0"
          class="el-menu-demo"
          mode="horizontal"
        >
          <el-menu-item>
            <router-link to="/dashboard">
              <span class="logo">Jancoyan</span>
            </router-link>
          </el-menu-item>
          <el-menu-item
            style="float: right"
            @click="linkToDashBoard">
            <el-avatar
              size="large"
              :src="avatarUrl">
              登录
            </el-avatar>
          </el-menu-item>
        </el-menu>
      </el-col>
    </el-row>
    <el-row
      :gutter="24"
      style="padding-top: 60px"
    >
      <el-col :span="5">
        <el-card
          shadow="hover"
          style="text-align: center;"
        >
          <div class="article-info">
            <h2>{{ article.articleTitle }}</h2>
            <div>{{ article.articlePostTime | dateFormat }}</div>
            <el-divider></el-divider>
            <div>
              <div class="article-count">
                <span class="count-number">{{ article.articleViewCount }}</span>
                <span class="count-char">浏览</span>
              </div>
              <el-divider direction="vertical"></el-divider>
              <div class="article-count">
                <span class="count-number">{{ article.articleLikeCount }}</span>
                <span class="count-char">获赞</span>
              </div>
              <el-divider direction="vertical"></el-divider>
              <div class="article-count">
                <span class="count-number">{{ article.articleCommentCount }}</span>
                <span class="count-char">评论</span>
              </div>
            </div>
            <el-divider></el-divider>
            <div class="article-action">
              <div class="article-count">
                <span
                  class="count-number"
                  @click="likeArticle"
                >
                  <svg
                    t="1633675948290"
                    viewBox="0 0 1024 1024"
                    version="1.1"
                    xmlns="http:
                    p-id="2028"
                    width="40"
                    height="40"
                  >
                    <path
                      d="M938.666667 362.666667A234.666667 234.666667 0 0 0 704 128 271.36 271.36 0 0 0 512 216.32 271.36 271.36 0 0 0 320 128 234.666667 234.666667 0 0 0 85.333333 362.666667c0 167.253333 202.666667 352 298.666667 448l97.28 97.28a32 32 0 0 0 22.613333 9.386666h16.213334a32 32 0 0 0 22.613333-9.386666L640 810.666667c96-96 298.666667-280.746667 298.666667-448z"
                      p-id="2029"
                      :fill="like.liked ? '#f00' : '#dbdbdb'"
                    ></path>
                  </svg>
                </span>
              </div>
            </div>
          </div>
        </el-card>
      </el-col>
      <el-col
        :span="14"
        style="padding: 0 60px">
        <div
          class="md-content"
          v-html='article.articleHtml'
          style="word-break:break-all;"
        >
        </div>
        <el-divider>The End</el-divider>
        <el-card
          shadow="never"
          style="text-align: center;margin-top: 20px; padding: 20px; color: gray; border: none"
          v-if="!article.articleIsComment"
        >
          作者关闭了评论
        </el-card>
        <el-col v-if="article.articleIsComment">
          <div class="comment-area-title">
            <span class="comment-title-chinese">评论区</span>
            <span class="comment-title-english">Comments</span>
          </div>
          <div class="comment-list">
            <div
              class="comment-item"
              v-for="item in commentList"
              :key="item.commentId">
              <el-card shadow="never">
                <div class="comment-content">
                  {{ item.commentContent }}
                </div>
                <div class="comment-info">
                  <span class="comment-info-item"><i class="el-icon-user"></i>
                    {{ item.commentAuthorName }}</span>
                  <span class="comment-info-item"><i class="el-icon-date"></i>
                    {{ item.commentDate | dateFormat }}</span>
                  <!-- <span class="comment-info-item"><i class="el-icon-caret-top"></i>
                    {{ item.commentLikeCount }}</span> -->
                  <!-- <el-row style="float: right">
                    <el-button
                      type="primary"
                      size="mini"
                      plain
                      @click="likeComment(item.commentId)"
                    >赞同</el-button>
                    <el-button size="mini">回复</el-button>
                  </el-row> -->
                </div>
              </el-card>
            </div>
            <div class="pagination">
              <el-pagination
                background
                @current-change="commentPageChange"
                layout="prev, pager, next"
                :total="pagination.total"
                :page-size="pagination.size"
                v-if="commentList.length > 0"
              >
              </el-pagination>
            </div>
          </div>
          <div class="post-comment">
            <el-form
              :ref="form"
              :model="form"
              label-width="80px"
              :rules="rules">
              <el-form-item
                label="昵称"
                v-if="userlogin"
                prop="name"
              >
                <el-input
                  v-model="form.name"
                  maxlength="20"
                ></el-input>
              </el-form-item>
              <el-form-item
                label="邮箱"
                v-if="userlogin"
                prop="email"
              >
                <el-input
                  v-model="form.email"
                  maxlength="50"
                ></el-input>
              </el-form-item>
              <el-form-item
                label="评论"
                prop="content"
              >
                <el-input
                  type="textarea"
                  v-model="form.content"
                  autosize
                ></el-input>
              </el-form-item>
              <el-form-item>
                <el-button
                  type="primary"
                  @click="onSubmit"
                >评论</el-button>
              </el-form-item>
            </el-form>
          </div>
        </el-col>
      </el-col>
      <el-col :span="5">
        <el-card
          shadow="hover"
          style="text-align: center;"
        >
          <el-avatar
            :size="80"
            :src="authorAvatar"></el-avatar>
          <div class="user-info">
            <h3>{{ author.userName }}</h3>
            <blockquote> {{ author.userSignature }} </blockquote>
            <el-divider></el-divider>
            <div>
              <div class="user-count">
                <span class="count-number">{{ author.totalArticle }}</span>
                <span class="count-char">文章</span>
              </div>
              <el-divider direction="vertical"></el-divider>
              <div class="user-count">
                <span class="count-number">{{ author.totalLikeCount }}</span>
                <span class="count-char">获赞</span>
              </div>
              <el-divider direction="vertical"></el-divider>
              <div class="user-count">
                <span class="count-number">{{ author.totalCommentCount }}</span>
                <span class="count-char">获评</span>
              </div>
            </div>
          </div>
        </el-card>
      </el-col>
    </el-row>
    <el-backtop></el-backtop>
  </div>
</template>
<script>
import { getToken } from '@/utils/auth'
import { hljs } from '@/assets/js/highhight'
import {
  getSingleArticle,
  viewArticle,
  likeArticle,
  dislikeArticle,
} from '@/api/article'
import { getAuthorInfo } from '@/api/user'
import { getCommentByArticle, likeComment, postComment } from '@/api/comment'
import { isLiked } from '@/api/like'
export default {
  data() {
    var checkEmail = (rule, value, callback) => {
      const mailReg = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/
      if (!value) {
        return callback(new Error('邮箱不能为空'))
      }
      setTimeout(() => {
        if (mailReg.test(value)) {
          callback()
        } else {
          callback(new Error('请输入正确的邮箱格式'))
        }
      }, 100)
    }
    return {
      userlogin: false,
      avatarUrl: '',
      form: {
        articleId: '',
        name: '',
        email: '',
        content: '',
      },
      rules: {
        name: [
          { required: true, message: '请输入用户名', trigger: 'blur' },
          {
            min: 2,
            max: 20,
            message: '长度在 2 到 20 个字符',
            trigger: 'blur',
          },
        ],
        email: [
          { required: true, message: '请输入邮箱', trigger: 'blur' },
          { validator: checkEmail, message: '格式不正确', trigger: 'blur' },
        ],
        content: [{ required: true, message: '请输入内容', trigger: 'blur' }],
      },
      author: {},
      article: {},
      commentList: [],
      pagination: {
        pn: 1,
        total: 1,
        size: 10,
      },
      query: {},
      like: {
        liked: false,
        color: '#fffff',
      },
    }
  },
  created() {
    this.renderPage()
    this.userlogin = getToken() === undefined 
    this.query = this.$router.query
    this.avatarUrl = this.$store.getters.avatar
  },
  filters: {
    dateFormat(date) {
      var s = new Date(date)
      var y = s.getFullYear()
      var m =
        s.getMonth() + 1 < 10 ? '0' + (s.getMonth() + 1) : s.getMonth() + 1
      var dd = s.getDate() < 10 ? '0' + s.getDate() : s.getDate()
      var hh = s.getHours() < 10 ? '0' + s.getHours() : s.getHours()
      var mm = s.getMinutes() < 10 ? '0' + s.getMinutes() : s.getMinutes()
      var ss = s.getSeconds() < 10 ? '0' + s.getSeconds() : s.getSeconds()
      var enddate = y + '-' + m + '-' + dd + ' ' + hh + ':' + mm + ':' + ss
      return enddate
    },
  },
  methods: {
    linkToDashBoard() {
      this.islogin = undefined !== getToken()
      if (this.islogin) this.$router.push('/dashboard')
      else this.$router.push('/login')
    },
    async renderPage() {
      var _this = this
      var query = this.$route.query
      this.query = this.$route.query
      await getSingleArticle(query.id).then((response) => {
        _this.article = response.extend.article
      })
      this.addViewCount(query.id)
      getAuthorInfo(_this.article.articleAuthor).then((response) => {
        _this.author = response.extend.data
          _this.authorAvatar =
          'http:
      })
      this.get_comment_list(this.$route.query, 1)
      isLiked(this.$route.query.id).then((res) => {
        _this.like.liked = res.extend.suc
      })
      hljs.highlightAll() 
    },
    get_comment_list(query, pn) {
      var _this = this
      var id = query.id
      getCommentByArticle(id, pn, 7).then((response) => {
        var pageInfo = response.extend.pageInfo
        _this.pagination.total = pageInfo.total
        _this.pagination.pn = pageInfo.current
        _this.pagination.size = pageInfo.size
        _this.commentList = pageInfo.records
      })
    },
    commentPageChange(currentPage) {
      this.get_comment_list(this.$route.query, currentPage)
    },
    onSubmit() {
      var _this = this
      this.form.articleId = this.$route.query.id
      this.$refs[this.form].validate((valid) => {
        if (valid) {
          postComment(_this.form).then((res) => {
            _this.form.name = ''
            _this.form.email = ''
            _this.form.content = ''
            _this.$message({
              showClose: true,
              message: '成功',
              type: 'success',
            })
            this.get_comment_list(_this.$route.query, 1)
          })
        } else {
          return false
        }
      })
    },
    likeComment(commentId) {
      likeComment(commentId).then((res) => {})
    },
    likeArticle() {
      var _this = this
      if (this.like.liked) {
        dislikeArticle(this.article.articleId).then((res) => {
          _this.article.articleLikeCount -= 1
          _this.like.liked = false
        })
      } else {
        likeArticle(this.article.articleId).then((res) => {
          _this.article.articleLikeCount += 1
          _this.like.liked = true
        })
      }
    },
    addViewCount(id) {
      var _this = this
      viewArticle(id).then((res) => {
        _this.article.articleViewCount += 1
      })
    },
  },
}
</script>
<style lang='scss' scoped>
@import '../../assets/css/highlight.css';
a {
  text-decoration: none;
}
body {
  background-color: white;
}
.logo {
  font-size: 30px;
  line-height: 30px;
  color: black;
}
h1 {
  text-align: center;
  font-size: 40px;
  margin: 40px 0;
  font-weight: 400;
}
.user-count,
.article-count {
  display: inline-flex;
  flex-direction: column;
  .count-number {
    font-size: 25px;
    font-weight: 550;
  }
  .count-char {
    font-size: 15px;
  }
}
.like {
  fill: #f00;
}
.md-content {
  line-height: 26px;
}
.comment-area-title {
  border-bottom: 1px solid black;
}
.comment-title-chinese {
  font-size: 40px;
  font-family: Arial, sans-serif;
}
.comment-title-english {
  font: italic 22px/30px arial, sans-serif;
}
.comment-item {
  margin: 5px 0;
}
.comment-info {
  margin-top: 10px;
}
.comment-info-item {
  color: gray;
  margin-right: 20px;
}
.pagination {
  margin: 20px 0;
  text-align: center;
}
</style>
<template>
  <div id="app">
    <el-row style="position: fixed; width:100%; z-index: 1">
      <el-col
        :span="14"
        :offset="5">
        <el-menu
          default-active="0"
          class="el-menu-demo"
          mode="horizontal"
        >
          <el-menu-item>
            <router-link to="/dashboard">
              <span class="logo">Jancoyan</span>
            </router-link>
          </el-menu-item>
          <el-menu-item style="float: right">
            <el-avatar src="http:
              <a
                href="http:
                target="_blank"
              ></a>
            </el-avatar>
          </el-menu-item>
        </el-menu>
      </el-col>
    </el-row>
    <el-row
      :gutter="24"
      style="padding-top: 60px"
    >
      <el-col :span="5">
        <el-card
          shadow="hover"
          style="text-align: center;"
        >
          <div class="article-info">
            <h2>{{ article.articleTitle }}</h2>
            <div>{{ article.articlePostTime | dateFormat }}</div>
            <el-divider></el-divider>
            <div>
              <div class="article-count">
                <span class="count-number">{{ article.articleViewCount }}</span>
                <span class="count-char">浏览</span>
              </div>
              <el-divider direction="vertical"></el-divider>
              <div class="article-count">
                <span class="count-number">{{ article.articleLikeCount }}</span>
                <span class="count-char">获赞</span>
              </div>
              <el-divider direction="vertical"></el-divider>
              <div class="article-count">
                <span class="count-number">{{ article.articleCommentCount }}</span>
                <span class="count-char">评论</span>
              </div>
            </div>
            <el-divider></el-divider>
            <div class="article-action">
              <div class="article-count">
                <span
                  class="count-number"
                >
                  <svg
                    t="1633675948290"
                    viewBox="0 0 1024 1024"
                    version="1.1"
                    xmlns="http:
                    p-id="2028"
                    width="40"
                    height="40"
                  >
                    <path
                      d="M938.666667 362.666667A234.666667 234.666667 0 0 0 704 128 271.36 271.36 0 0 0 512 216.32 271.36 271.36 0 0 0 320 128 234.666667 234.666667 0 0 0 85.333333 362.666667c0 167.253333 202.666667 352 298.666667 448l97.28 97.28a32 32 0 0 0 22.613333 9.386666h16.213334a32 32 0 0 0 22.613333-9.386666L640 810.666667c96-96 298.666667-280.746667 298.666667-448z"
                      p-id="2029"
                      :fill="like.liked ? '#f00' : '#dbdbdb'"
                    ></path>
                  </svg>
                </span>
              </div>
            </div>
          </div>
        </el-card>
      </el-col>
      <el-col
        :span="14"
        style="padding: 0 60px">
        <div
          class="md-content"
          v-html='article.articleHtml'
          style="word-break:break-all;"
        >
        </div>
        <el-divider>The End</el-divider>
        <el-col v-if="article.articleIsComment">
          <div class="comment-area-title">
            <span class="comment-title-chinese">评论区</span>
            <span class="comment-title-english">Comments</span>
          </div>
          <div class="comment-list">
            <div
              class="comment-item"
              v-for="item in commentList"
              :key="item.commentId">
              <el-card shadow="never">
                <div class="comment-content">
                  {{ item.commentContent }}
                </div>
                <div class="comment-info">
                  <span class="comment-info-item"><i class="el-icon-user"></i>
                    {{ item.commentAuthorName }}</span>
                  <span class="comment-info-item"><i class="el-icon-date"></i>
                    {{ item.commentDate | dateFormat }}</span>
                  <!-- <span class="comment-info-item"><i class="el-icon-caret-top"></i>
                    {{ item.commentLikeCount }}</span> -->
                  <!-- <el-row style="float: right">
                    <el-button
                      type="primary"
                      size="mini"
                      plain
                      @click="likeComment(item.commentId)"
                    >赞同</el-button>
                    <el-button size="mini">回复</el-button>
                  </el-row> -->
                </div>
              </el-card>
            </div>
            <div class="pagination">
              <el-pagination
                background
                @current-change="commentPageChange"
                layout="prev, pager, next"
                :total="pagination.total"
                :page-size="pagination.size"
                v-if="commentList.length > 0"
              >
              </el-pagination>
            </div>
          </div>
        </el-col>
      </el-col>
      <el-col :span="5">
        <el-card
          shadow="hover"
          style="text-align: center;"
        >
          <el-avatar
            :size="80"
            :src="authorAvatar"></el-avatar>
          <div class="user-info">
            <h3>{{ author.userName }}</h3>
            <blockquote> {{ author.userSignature }} </blockquote>
            <el-divider></el-divider>
            <div>
              <div class="user-count">
                <span class="count-number">{{ author.totalArticle }}</span>
                <span class="count-char">文章</span>
              </div>
              <el-divider direction="vertical"></el-divider>
              <div class="user-count">
                <span class="count-number">{{ author.totalLikeCount }}</span>
                <span class="count-char">获赞</span>
              </div>
              <el-divider direction="vertical"></el-divider>
              <div class="user-count">
                <span class="count-number">{{ author.totalCommentCount }}</span>
                <span class="count-char">获评</span>
              </div>
            </div>
          </div>
        </el-card>
      </el-col>
    </el-row>
    <el-backtop></el-backtop>
  </div>
</template>
<script>
import { getToken } from '@/utils/auth'
import { hljs } from '@/assets/js/highhight'
import { getSingleArticleDeleted} from '@/api/article'
import { getAuthorInfo } from '@/api/user'
import { getCommentByDeletedArticle } from '@/api/comment'
import { isLiked } from '@/api/like'
export default {
  data() {
    return {
      userlogin: false,
      authorAvatar: 'http:
      author: {},
      article: {},
      commentList: [],
      pagination: {
        pn: 1,
        total: 1,
        size: 10,
      },
      query: {},
      like: {
        liked: false,
        color: '#fffff',
      },
    }
  },
  created() {
    this.renderPage()
    this.userlogin = getToken() === undefined 
    this.query = this.$router.query
  },
  filters: {
    dateFormat(date) {
      var s = new Date(date)
      var y = s.getFullYear()
      var m =
        s.getMonth() + 1 < 10 ? '0' + (s.getMonth() + 1) : s.getMonth() + 1
      var dd = s.getDate() < 10 ? '0' + s.getDate() : s.getDate()
      var hh = s.getHours() < 10 ? '0' + s.getHours() : s.getHours()
      var mm = s.getMinutes() < 10 ? '0' + s.getMinutes() : s.getMinutes()
      var ss = s.getSeconds() < 10 ? '0' + s.getSeconds() : s.getSeconds()
      var enddate = y + '-' + m + '-' + dd + ' ' + hh + ':' + mm + ':' + ss
      return enddate
    },
  },
  methods: {
    async renderPage() {
      var _this = this
      var query = this.$route.query
      this.query = this.$route.query
      await getSingleArticleDeleted(query.id).then((response) => {
        _this.article = response.extend.article
      })
      getAuthorInfo(_this.article.articleAuthor).then((response) => {
        _this.author = response.extend.data
      })
      this.get_comment_list(this.$route.query, 1)
      isLiked(this.$route.query.id).then((res) => {
        _this.like.liked = res.extend.suc
      })
      hljs.highlightAll() 
    },
    get_comment_list(query, pn) {
      var _this = this
      var id = query.id
      getCommentByDeletedArticle(id, pn, 7).then((response) => {
        var pageInfo = response.extend.pageInfo
        _this.pagination.total = pageInfo.total
        _this.pagination.pn = pageInfo.current
        _this.pagination.size = pageInfo.size
        _this.commentList = pageInfo.records
      })
    },
    commentPageChange(currentPage) {
      this.get_comment_list(this.$route.query, currentPage)
    },
  },
}
</script>
<style lang='scss' scoped>
@import '../../assets/css/highlight.css';
a {
  text-decoration: none;
}
body {
  background-color: white;
}
.logo {
  font-size: 30px;
  line-height: 30px;
  color: black;
}
h1 {
  text-align: center;
  font-size: 40px;
  margin: 40px 0;
  font-weight: 400;
}
.user-count,
.article-count {
  display: inline-flex;
  flex-direction: column;
  .count-number {
    font-size: 25px;
    font-weight: 550;
  }
  .count-char {
    font-size: 15px;
  }
}
.like {
  fill: #f00;
}
.md-content {
line-height: 26px;
}
.comment-area-title {
  border-bottom: 1px solid black;
}
.comment-title-chinese {
  font-size: 40px;
  font-family: Arial, sans-serif;
}
.comment-title-english {
  font: italic 22px/30px arial, sans-serif;
}
.comment-item {
  margin: 5px 0;
}
.comment-info {
  margin-top: 10px;
}
.comment-info-item {
  color: gray;
  margin-right: 20px;
}
.pagination {
  margin: 20px 0;
  text-align: center;
}
</style>
<template>
  <div class="app">
    <vue-particles
      class="particles"
      color="#dedede"
      shapeType="polygon"
      :hoverEffect="false"
      :clickEffect="false"
      :linesWidth="2"
      v-show="backgroundMode"
    ></vue-particles>
    <el-row
      :gutter="20"
      style="position: fixed; width:100%; z-index: 1"
    >
      <el-col
        :span="16"
        :offset="4">
        <el-menu
          default-active="0"
          class="el-menu-demo"
          mode="horizontal"
        >
          <el-menu-item>
            <span class="logo">Jancoyan</span>
          </el-menu-item>
          <el-menu-item index="0">首页</el-menu-item>
          <el-menu-item
            style="float: right"
            @click="linkToDashBoard">
            <el-avatar
              size="large"
              :src="avatarUrl">
              登录
            </el-avatar>
          </el-menu-item>
        </el-menu>
      </el-col>
    </el-row>
    <el-row :gutter="20">
      <el-col
        :span="10"
        :offset="4">
        <search-article
          ref="searchArticle"
          :typeList="typeList"
          @submit="submit"
          @reset="resetForm"
        ></search-article>
        <el-switch
          v-model="simpleMode"
          active-color="#13ce66"
          active-text="简洁模式"
          inactive-text="标准模式"
        >
        </el-switch>
        <span style="margin:0 10px"></span>
        <el-switch
          v-model="backgroundMode"
          active-color="#13ce66"
          active-text="打开背景"
          inactive-text="关闭背景"
        >
        </el-switch>
        <div
          id="article-list"
          v-for="item in articleList"
          :key="item.articleId"
        >
          <router-link
            :to="base_article_url + item.articleId"
            target="_blank">
            <el-card
              class="box-card"
              shadow="hover">
              <div style="font-weight: 700;">
                <el-tag 
                size="mini"
                effect="dark"
                type="danger"
                v-if="item.articleRank"
                >置顶</el-tag>
                {{ item.articleTitle }}
                </div>
              <el-divider
                v-if="!simpleMode"
                class="el-divider"
              ><i class="el-icon-star-off"></i></el-divider>
              <div v-if="!simpleMode">{{ item.articleSummary }}</div>
              <el-divider
                v-if="!simpleMode"
                class="el-divider"
              ><i class="el-icon-star-off"></i></el-divider>
              <div>
                <span><i class="el-icon-user"></i> {{ item.userName }} </span>
                <el-divider direction="vertical"></el-divider>
                <span><i class="el-icon-time"></i> {{ item.articlePostTime | dateFormat }}</span>
                <el-divider direction="vertical"></el-divider>
                <span><i class="el-icon-view"></i> {{ item.articleViewCount }}</span>
              </div>
            </el-card>
          </router-link>
        </div>
        <div class="pagigation">
          <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="currentPage"
            :page-sizes="[10, 20, 30, 40]"
            :page-size="page_size"
            layout="total, sizes, prev, pager, next, jumper"
            :total="total">
          </el-pagination>
        </div>
      </el-col>
      <el-col
        :span="5"
        :offset="1">
        <el-card
          class="box-card"
          id="article_type_list"
        >
          <div
            slot="header"
            class="clearfix">
            <span style="font-weight: 600">文章分类</span>
          </div>
          <div
            v-for="item in typeList"
            :key="item.typeId">
            <a @click="get_article_by_type(item.typeId)">{{ item.typeName }}</a>
          </div>
        </el-card>
      </el-col>
    </el-row>
    <el-backtop></el-backtop>
  </div>
</template>
<script>
import { getIndexArticleList } from '@/api/article'
import { getAllType } from '@/api/type'
import { getToken } from '@/utils/auth'
import SearchArticle from '@/components/SearchArticle'
export default {
  components: { SearchArticle },
  data() {
    return {
      islogin: false,
      simpleMode: false,
      backgroundMode: true,
      avatarUrl: '',
      base_article_url: '/article?id=',
      condition: '',
      articleList: [],
      typeList: [],
      currentPage: 1,
      page_size: 10,
      total: 0,
    }
  },
  filters: {
    dateFormat(date) {
      var s = new Date(date)
      var y = s.getFullYear()
      var m =
        s.getMonth() + 1 < 10 ? '0' + (s.getMonth() + 1) : s.getMonth() + 1
      var dd = s.getDate() < 10 ? '0' + s.getDate() : s.getDate()
      var hh = s.getHours() < 10 ? '0' + s.getHours() : s.getHours()
      var mm = s.getMinutes() < 10 ? '0' + s.getMinutes() : s.getMinutes()
      var ss = s.getSeconds() < 10 ? '0' + s.getSeconds() : s.getSeconds()
      var enddate = y + '-' + m + '-' + dd + ' ' + hh + ':' + mm + ':' + ss
      return enddate
    },
  },
  created: function () {
    this.get_article_list(1)
    this.get_type_list()
    this.avatarUrl = this.$store.getters.avatar
  },
  methods: {
    linkToDashBoard() {
      this.islogin = undefined !== getToken()
      if (this.islogin) this.$router.push('/dashboard')
      else this.$router.push('/login')
    },
    handleSizeChange(val) {
      this.page_size = val
      this.get_article_list(1)
    },
    handleCurrentChange(val) {
      this.get_article_list(val)
    },
    get_article_list(pn) {
      getIndexArticleList(pn, this.page_size, this.condition).then(
        (response) => {
          var pageInfo = response.extend.pageInfo
          if (pageInfo.total === 0) {
            this.$message.error('没有相关文章~')
            return
          }
          this.articleList = pageInfo.records
          this.page_size = pageInfo.size
          this.total = pageInfo.total
        }
      )
    },
    get_type_list(pn) {
      getAllType().then((response) => {
        var pageInfo = response.extend.pageInfo
        this.typeList = pageInfo.records
      })
    },
    submit() {
      this.condition = this.$refs.searchArticle.generateQueryString()
      this.get_article_list(1)
    },
    resetForm(){
      this.condition = ''
      this.get_article_list(1)
    },
    get_article_by_type(typeId) {
      this.condition = 'type=' + String(typeId)
      this.get_article_list(1)
    },
  },
}
</script>
<style lang='scss' scoped>
a {
  text-decoration: none;
}
.particles {
  width: 100%;
  height: 100vh;
  position: fixed;
}
.app {
  padding-bottom: 40px;
}
.user-avatar {
  float: right;
}
.el-divider {
  margin: 10px;
}
.logo {
  font-size: 30px;
  line-height: 30px;
  color: black;
}
.el-card__body {
  padding-bottom: 8px;
}
#article-list {
  margin-top: 20px;
  margin-bottom: 20px;
}
.search-bar {
  margin-top: 60px;
  margin-bottom: 20px;
}
#article_type_list {
  margin-top: 80px;
  width: 300px;
  position: fixed;
  a {
    color: black;
    text-decoration: none;
    display: block;
    height: 30px;
    font-size: 16px;
    padding: 10px;
    &:hover {
      font-weight: 600;
      background-color: #ebeff5;
    }
  }
}
</style>
<template>
  <div class="cropper-content">
    <div class="cropper-box">
      <div class="cropper">
        <vue-cropper
          ref="cropper"
          :img="option.img"
          :outputSize="option.outputSize"
          :outputType="option.outputType"
          :info="option.info"
          :canScale="option.canScale"
          :autoCrop="option.autoCrop"
          :autoCropWidth="option.autoCropWidth"
          :autoCropHeight="option.autoCropHeight"
          :fixed="option.fixed"
          :fixedNumber="option.fixedNumber"
          :full="option.full"
          :fixedBox="option.fixedBox"
          :canMove="option.canMove"
          :canMoveBox="option.canMoveBox"
          :original="option.original"
          :centerBox="option.centerBox"
          :height="option.height"
          :infoTrue="option.infoTrue"
          :maxImgSize="option.maxImgSize"
          :enlarge="option.enlarge"
          :mode="option.mode"
          @realTime="realTime"
          @imgLoad="imgLoad"
        >
        </vue-cropper>
      </div>
      <!--底部操作工具按钮-->
      <div class="footer-btn">
        <div class="scope-btn">
          <label
            class="btn"
            for="uploads"
          >选择图片</label>
          <input
            type="file"
            id="uploads"
            style="position:absolute; clip:rect(0 0 0 0);"
            accept="image/png, image/jpeg, image/gif, image/jpg"
            @change="selectImg($event)"
          >
          <el-button
            size="mini"
            type="danger"
            plain
            icon="el-icon-zoom-in"
            @click="changeScale(1)"
          >放大</el-button>
          <el-button
            size="mini"
            type="danger"
            plain
            icon="el-icon-zoom-out"
            @click="changeScale(-1)"
          >缩小</el-button>
          <el-button
            size="mini"
            type="danger"
            plain
            @click="rotateLeft"
          >↺ 左旋转</el-button>
          <el-button
            size="mini"
            type="danger"
            plain
            @click="rotateRight"
          >↻ 右旋转</el-button>
        </div>
        <div class="upload-btn">
          <el-button
            size="mini"
            type="success"
            @click="uploadImg('blob')"
          >上传 <i class="el-icon-upload"></i></el-button>
        </div>
      </div>
    </div>
    <!--预览效果图-->
    <div class="show-preview">
      <div
        :style="previews.div"
        class="preview"
      >
        <img
          :src="previews.url"
          :style="previews.img"
        >
      </div>
    </div>
  </div>
</template>
<script>
import { VueCropper } from 'vue-cropper'
import { getToken } from '@/utils/auth'
export default {
  name: 'CropperImage',
  components: {
    VueCropper,
  },
  props: ['Name'],
  data() {
    return {
      name: this.Name,
      previews: {},
      option: {
        img: '', 
        outputSize: 1, 
        outputType: 'png', 
        info: true, 
        canScale: true, 
        autoCrop: true, 
        autoCropWidth: 256, 
        autoCropHeight: 256, 
        fixed: true, 
        fixedNumber: [1, 1], 
        full: false, 
        fixedBox: true, 
        canMove: false, 
        canMoveBox: true, 
        original: false, 
        centerBox: false, 
        height: true, 
        infoTrue: false, 
        maxImgSize: 2000, 
        enlarge: 1, 
        mode: '256px 256px', 
      },
    }
  },
  methods: {
    imgLoad(msg) {},
    changeScale(num) {
      num = num || 1
      this.$refs.cropper.changeScale(num)
    },
    rotateLeft() {
      this.$refs.cropper.rotateLeft()
    },
    rotateRight() {
      this.$refs.cropper.rotateRight()
    },
    realTime(data) {
      this.previews = data
    },
    selectImg(e) {
      let file = e.target.files[0]
      if (!/\.(jpg|jpeg|png|JPG|PNG)$/.test(e.target.value)) {
        this.$message({
          message: '图片类型要求：jpeg、jpg、png',
          type: 'error',
        })
        return false
      }
      let reader = new FileReader()
      reader.onload = (e) => {
        let data
        if (typeof e.target.result === 'object') {
          data = window.URL.createObjectURL(new Blob([e.target.result]))
        } else {
          data = e.target.result
        }
        this.option.img = data
      }
      reader.readAsDataURL(file)
    },
    uploadImg(type) {
      let _this = this
      if (type === 'blob') {
        this.$refs.cropper.getCropBlob(async (data) => {
          let formData = new FormData()
          formData.append('file', data, 'file.png')
          const ajax = new XMLHttpRequest()
          ajax.open('POST', 'http:
          ajax.setRequestHeader('token', getToken())
          ajax.send(formData)
          ajax.onreadystatechange = function () {
            if(ajax.readyState === 4){
              _this.$emit('uploadImgSuccess', ajax.responseText)
            }
          }
        })
      }
    },
  },
}
</script>
<style scoped lang="scss">
.cropper-content {
  display: flex;
  display: -webkit-flex;
  justify-content: flex-end;
  .cropper-box {
    flex: 1;
    width: 100%;
    .cropper {
      width: auto;
      height: 300px;
    }
  }
  .show-preview {
    flex: 1;
    -webkit-flex: 1;
    display: flex;
    display: -webkit-flex;
    justify-content: center;
    .preview {
      overflow: hidden;
      border: 1px solid #67c23a;
      background: #cccccc;
    }
  }
}
.footer-btn {
  margin-top: 30px;
  display: flex;
  display: -webkit-flex;
  justify-content: flex-end;
  .scope-btn {
    display: flex;
    display: -webkit-flex;
    justify-content: space-between;
    padding-right: 10px;
  }
  .upload-btn {
    flex: 1;
    -webkit-flex: 1;
    display: flex;
    display: -webkit-flex;
    justify-content: center;
  }
  .btn {
    outline: none;
    display: inline-block;
    line-height: 1;
    white-space: nowrap;
    cursor: pointer;
    -webkit-appearance: none;
    text-align: center;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    outline: 0;
    -webkit-transition: 0.1s;
    transition: 0.1s;
    font-weight: 500;
    padding: 8px 15px;
    font-size: 12px;
    border-radius: 3px;
    color: #fff;
    background-color: #409eff;
    border-color: #409eff;
    margin-right: 10px;
  }
}
</style>
